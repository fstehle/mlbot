service: mlbot

provider:
  name: aws
  runtime: python3.7
  memorySize: 512 # memory >=512 MB has much more predictable performance
  timeout: 10
  region: eu-west-1
  environment:
    EndpointName: ${self:custom.sagemakerEndpointName}
    ClassifierName: ${self:custom.classifierName}
    DetectorName: ${self:custom.detectorName}
    QueueUrl:
      Ref: SQSQueue
    SlackToken: ${ssm:/${self:service}-${opt:stage}/SLACK_TOKEN~true}
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "sagemaker:InvokeEndpoint"
       Resource: "arn:aws:sagemaker:#{AWS::Region}:#{AWS::AccountId}:endpoint/${self:custom.sagemakerEndpointName}"
    -  Effect: "Allow"
       Action:
         - "rekognition:DetectLabels"
       Resource: "*"
    -  Effect: "Allow"
       Action:
         - "lambda:InvokeFunction"
       Resource:
         - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.classifierName}"
         - "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:custom.detectorName}"
    -  Effect: "Allow"
       Action:
         - "sqs:ReceiveMessage"
         - "sqs:DeleteMessage"
         - "sqs:GetQueueAttributes"
         - "sqs:SendMessage"
       Resource:
         Fn::GetAtt: SQSQueue.Arn

plugins:
  - serverless-pseudo-parameters

custom:
  sagemakerEndpointName: mlbot-classify-ep--2019-02-14-09-16-45
  classifierName: mlbot-${opt:stage}-classify
  detectorName: mlbot-${opt:stage}-detect

package:
  exclude:
    - '**/*'
  include:
    - 'functions/*.py'

functions:
  classify:
    handler: functions/classify.lambda_handler
  detect:
    handler: functions/detect.lambda_handler
  dispatch:
    handler: functions/dispatch.lambda_handler
    events:
      - http:
          path: /dispatch
          method: any
  handler:
    handler: functions/handler.lambda_handler
    events:
      - sqs:
          arn:
            Fn::GetAtt: SQSQueue.Arn
resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: mlbot-requests